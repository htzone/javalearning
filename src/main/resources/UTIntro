PowerMock简介
PowerMock是一个Java模拟框架，是在EasyMock以及Mockito基础上的扩展，可用于解决通常认为很难甚至无法测试的测试问题。
使用PowerMock，可以模拟静态方法，删除静态初始化程序，允许模拟而不依赖于注入，等等。PowerMock通过在执行测试时在运行时修改字节码来完成这些技巧。PowerMock还包含一些实用程序，
可让您更轻松地访问对象的内部状态。

为什么使用PowerMock
EasyMock以及Mockito都因为可以极大地简化单元测试的书写过程而被广泛使用，但是这2种Mock工具都不可以实现对静态函数、构造函数、私有函数、Final 函数以及系统函数的模拟。
PowerMock是在EasyMock以及Mockito基础上的扩展，通过定制类加载器以及一些字节码篡改技巧的应用，PowerMock实现了对静态方法、构造方法、私有方法以及 Final 方法的模拟支持，对静态初始化过程的移除等强大的功能。
PowerMock优点：
1.“Pwoer”，可以实现对静态函数、构造函数、私有函数、Final函数以及系统函数的模拟。
2.因为PowerMock在扩展功能时完全采用和被扩展的框架相同的API, 熟悉PowerMock所支持的模拟框架的开发者会发现 PowerMock 非常容易上手。PowerMock的目的就是在当前已经被大家所熟悉的接口上通过添加极少的方法和注释来实现额外的功能，PowerMock支持EasyMock和Mockito。

PowerMock原理简介

常见UT场景技巧

mock与真正执行的区别
mock就是模拟的意思，指不需要去真正执行，只需要达到我们的预期即可。
在被测试代码需要调用某些接口的时候，直接模拟一个假的接口，并指定该接口一个预期的行为，可以极大的简化了单元测试的编写过程，提高单元测试的效率。

被测试代码：
public class Calculator {

    public int calc(int start, int end)
    {
        logInfo(start, end);
        if(CheckUtil.check(start, end))
        {
            return calcFunc(start, end);
        }
        return 0;
    }

    private int calcFunc(int start, int end)
    {
        int sum = 0;
        for(int i = start; i<=end; i++)
        {
            sum += i;
        }
        return sum;
    }

    public void logInfo(int start, int end)
    {
        System.out.println("start:" + start + ", end:" + end);
    }
}

public class CheckUtil {

    public static boolean check(int a, int b)
    {
        checkInfo(a, b);
        return checkFunc(a, b);
    }

    private static boolean checkFunc(int a, int b)
    {
        return a > 0 && b > 0;
    }

    private static void checkInfo(int a, int b)
    {
        System.out.println("check info...");
    }
}

mock 普通方法
XXX xxx = PowerMockito.mock(XXX.class);
//带返回值的方法
PowerMockito.when(xxx.methodXXX()).thenReturn(XX);
//不带返回值的方法
PowerMockito.doNothing().when(xxx).methodXXX();

模糊参数匹配
mock方法时可以不用传入固定的参数，可以传一个模糊的参数匹配任意该类型的参数
Mockito.any(XXX.class)
Mockito.anyInt()
Mockito.anyFloat()
Mockito.anyDouble()
Mockito.anyString()
Mockito.any(int[].class)
......
注意：一旦有一个参数使用模糊匹配，则该方法全部参数都要使用模糊匹配，否则会报错。

mock 私有方法
方法1：使用mock对象，真正要执行的方法调用thenCallRealMethod()，表明在执行该方法的时候要正常执行，不想执行的方法则使用mock。
Calculator calculator = PowerMockito.mock(Calculator.class);
PowerMockito.when(calculator.calc(Mockito.anyInt(), Mockito.anyInt())).thenCallRealMethod();
PowerMockito.when(calculator, "calcFunc", Mockito.anyInt(), Mockito.anyInt()).thenReturn(1);
int result = calculator.calc(1, 10);
Assert.assertEquals(1, result);

方法2：使用spy监听对象，对它进行方法调用时，它将调用真实的方法，不想执行的方法也可以mock让其返回预期。
Calculator calculator = PowerMockito.spy(new Calculator());
PowerMockito.when(calculator, "calcFunc", Mockito.anyInt(), Mockito.anyInt()).thenReturn(1);
int result = calculator.calc(1, 10);
Assert.assertEquals(1, result);

注意：要mock私有方法，必须要在@PrepareForTest中加入私有方法所在的类。
对于final类、匿名类和Java的基本类型是无法进行spy的。

mock 静态方法
PowerMockito.mockStatic(CheckUtil.class);
//带返回值
PowerMockito.when(CheckUtil.check(Mockito.anyInt(), Mockito.anyInt())).thenReturn(false);
//不带返回值
PowerMockito.doNothing().when(CheckUtil.class, "checkInfo", Mockito.anyInt(), Mockito.anyInt());

注意：要mock静态方法，必须要在@PrepareForTest中加入静态方法所在的类。

mock final方法
在@PrepareForTest中加入该final方法所在的类。
//XXX为包含final方法的类
XXX xxx = PowerMockito.mock(XXX.class);
PowerMockito.when(xxx.finalmethodXXX()).thenReturn(XX);
注意：要调用final方法，必须要在@PrepareForTest中加入该final方法所在的类。

mock new新对象
Calculator calculator = PowerMockito.mock(Calculator.class);
PowerMockito.whenNew(Calculator.class).withNoArguments().thenReturn(calculator);
PowerMockito.when(calculator.calc(Mockito.anyInt(), Mockito.anyInt())).thenReturn(1);
注意：必须要在@PrepareForTest中加入new对象所在的类。

mock final类
//XXX为final修饰的类
XXX xxx = PowerMockito.mock(XXX.class);
注意：必须要在@PrepareForTest中加入该final类。

mock 系统类
//XXX为系统类
XXX xxx = PowerMockito.mock(XXX.class);
注意：必须要在@PrepareForTest中加入使用该系统类的类。

同一个方法预期返回不同的值
每次调用该方法会返回不同的值，返回的顺序为thenReturn中的顺序。
PowerMockito.when(xxx.methodXXX()).thenReturn(XX1, XX2, XX3...);

mock 抛异常
//带返回值
PowerMockito.when(xxx.methodXXX()).thenThrow(new XXXException());
//不带返回值
PowerMockito.doThrow(new XXXException()).when(xxx).methodXXX();

访问私有构造器
Whitebox.invokeConstructor(..)
访问私有实例（类）属性
Whitebox.setInternalState(..)
Whitebox.getInternalState(..)
测试私有实例（类）方法
Whitebox.invokeMethod(..)



